what does the environment have that we need to model


hosts
links

Important behaviours
* Only one exa moves/is processed at a time, which means no paralell behaviour hopefully

for now, i am going to have object coupling :(
the environment will have


——————————————————————— 
Execution cycle:

0. Environment Initialized Properly
—— 
1. exa interacts/modifies environment
2. environment updates and resolves self
3. environment updates all exas
	a. environment propagates changes


Most likely we are going to use a Environment Message Bus, in which the side effects generated by the exas are modeled as messages that are enqueued onto a shared bus, and these are resolved at every cycle. To resolve ambigueity, we will call the simulation/environment messages bus the envbus, and the in game message passing facility the message queue



environment:
while there still exist exas (that are not halted):
	for each exa:
		step the exa
		process and resolve any updates that the exa has queued for the environment


2 buses
envbus_in - goes from exas to environment
	* many exas put events, one environment processes
	* Environment Requests are recieved here
	* exa ---- [ EnvRequest ] ----> environment 

envbus_out - goes from environment out to exas
	* one environment process puts events, exas for which the events are intended process them
	* environment ---- [ StatusUpdate ] ----> exa


* NOTES
It is up to the exa to follow all messages intended for it on the envbus_out.
It is up to the Environment to correctly and accurately process all events put onto the envbus_in




Also, environment requests and status updates must be processed in a way that it is indistinguishable when it happens. That is, they must be resolved before the exa processes any more instructions and before the exa requests anything else from the environment.

In the processInstr method, all instructions that need



EXA:
runStep()
1. Process Status Updates from Environment 
2. Run instruction
3. Give Side Effects/EnvRequests to Environment

Environment
runEnv()
I. For all Exas
	1. Run Exa
	2. Process EnvRequests
	3. Give Status Updates to Environment

Things that we need:
an id system.
possible candidates:

use only numbers, and certain ranges mean that it is a certain object.
use hex numbers, more confusing but bigger possible max values
use js objects, one class for each object id, i.e.
	* HardwareRegID
	* ExaID
	* FileID
seems big and redundant. idk any good solutions tbh. this does seem to be the best right now tho 

